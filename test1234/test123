#include "sort.h"
#include <stdio.h>

/**
 * swapAdjacentNodes - swap a node with its previous one
 * @node: node to be swapped
 * @list: double linked list
 * Return: pointer to the node that was moved
 */
listint_t *swapAdjacentNodes(listint_t *node, listint_t **list)
{
    listint_t *back = node->prev, *current = node;

    back->next = current->next;
    if (current->next)
        current->next->prev = back;
    current->next = back;
    current->prev = back->prev;
    back->prev = current;
    if (current->prev)
        current->prev->next = current;
    else
        *list = current;
    return current;
}

/**
 * cocktail_sort_list - implementation of cocktail sort on a double linked list
 * @list: double linked list
 */
void cocktail_sort_list(listint_t **list)
{
    listint_t *node;
    int swapDone = 1;

    if (list == NULL || *list == NULL || (*list)->next == NULL)
        return;
    
    node = *list;
    
    while (swapDone == 1) 
    {
        swapDone = 0;
        while (node->next)
        {
            if (node->n > node->next->n)
            {
                node = swapAdjacentNodes(node->next, list);
                swapDone = 1;
                print_list(*list);
            }
            node = node->next;
        }
        
        if (swapDone == 0)
            break;
        
        swapDone = 0;
        while (node->prev)
        {
            if (node->n < node->prev->n)
            {
                node = swapAdjacentNodes(node, list);
                swapDone = 1;
                print_list(*list);
            }
            else
                node = node->prev;
        }
    }
}

